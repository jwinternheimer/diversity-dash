download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="/Users/julianwinternheimer/Google Drive/R_data/cacert.pem")
cred <- OAuthFactory$new(consumerKey=my_key, consumerSecret=my_secret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
cred$handshake(cainfo="/Users/julianwinternheimer/Google Drive/R_data/cacert.pem")
library(RCurl)
library(RJSONIO)
library(stringr)
cred <- OAuthFactory$new(consumerKey=my_key, consumerSecret=my_secret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem"), package = "RCurl")
filterStream('tweets.json',track=c('Trump','Hillary'),timeout=100,oauth=NULL)
filterStream('tweets.json',track=c('Trump','Hillary'),timeout=100,oauth=setup_twitter_oauth(my_key,my_secret))
cred$handshake(cainfo="/Users/julianwinternheimer/Google Drive/R_data/cacert.pem")
my_secret <- "xudqegrS8MeCqtGMd6ThcFiVzZFhFfDx17LeSbHTOT6s9QkaXp"
access_token <- "2147862493-NwCDqixnrhPSC8H7An9eu3RGwzl0P2szCmXhIOw"
access_secret <- "Tk3ZqYx6ZetXSyNtpl7DCWLSRv2oBigzuDVh88LOM1PQs"
cred <- OAuthFactory$new(consumerKey=my_key, consumerSecret=my_secret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
cred$handshake(cainfo="/Users/julianwinternheimer/Google Drive/R_data/cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="/Users/julianwinternheimer/Google Drive/R_data/cacert.pem")
cred <- OAuthFactory$new(consumerKey=my_key, consumerSecret=my_secret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
cred$handshake(cainfo="/Users/julianwinternheimer/Google Drive/R_data/cacert.pem")
my_key <- "17ojBRBJbtzO0l8ROxyuoqwLu"
my_secret <- "MShlldAje9GhgEn7VQE1SBXs5pQANE9LhgPFfWOPxPqF6uSA1j"
access_token <- "2147862493-vjEWEE3MitNaFacbuE6iZq2NmzX9AgpDlOiOTzu"
access_secret <- "WF9nbo0a6YjtkOa30SjJwVBuLA5NGl3HWSu9TmxKB2mrJ"
cred <- OAuthFactory$new(consumerKey=my_key, consumerSecret=my_secret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
cred$handshake(cainfo="/Users/julianwinternheimer/Google Drive/R_data/cacert.pem")
consumerSecret=my_secret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
my_oauth <- OAuthFactory$new(consumerKey=my_key,
consumerSecret=my_secret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
my_secret <- "xudqegrS8MeCqtGMd6ThcFiVzZFhFfDx17LeSbHTOT6s9QkaXp"
access_token <- "2147862493-NwCDqixnrhPSC8H7An9eu3RGwzl0P2szCmXhIOw"
access_secret <- "Tk3ZqYx6ZetXSyNtpl7DCWLSRv2oBigzuDVh88LOM1PQs"
my_key <- "ypaB04Eo3ZbKz5HyQ7oxjg8Nx"
setup_twitter_oauth(my_key,my_secret)
my_oauth <- OAuthFactory$new(consumerKey=my_key,
consumerSecret=my_secret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
filterStream('tweets.json',track=c('Trump','Hillary'),timeout=100,oauth=my_oauth)
filterStream('tweets.json',track=c('Trump','Hillary'),locations = c(-125, 25, -66, 50),
timeout=60,oauth=my_oauth)
tweets.df <- parseTweets("tweets.json", simplify = TRUE)
tweets.df <- parseTweets("tweets.json", simplify = TRUE,verbose = F)
tweets.df <- parseTweets("tweets.json", simplify = TRUE)
c( length(grep("Trump", tweets.df$text, ignore.case = TRUE)),
length(grep("Hilary", tweets.df$text, ignore.case = TRUE)) )
c( length(grep("Trump", tweets.df$text, ignore.case = TRUE)),
length(grep("Hillary", tweets.df$text, ignore.case = TRUE)) )
c( length(grep("Donald", tweets.df$text, ignore.case = TRUE)),
length(grep("Hillary", tweets.df$text, ignore.case = TRUE)) )
tweets.df$text[1:20,]
tweets.df$text[1:20]
filterStream('tweets.json',track=c('Trump','Hillary'),locations = c(-125, 25, -66, 50),
timeout=120,oauth=my_oauth)
tweets_df <- parseTweets("tweets.json", simplify = TRUE)
tweets_df$text[1:20]
filterStream("trump.json",track=c("Trump","Hillary"),locations = c(-125, 25, -66, 50),
timeout=120,oauth=my_oauth)
tweets_df <- parseTweets("trump.json", simplify = TRUE)
tweets_df$text[1:20]
c( length(grep("trump", tweets.df$text, ignore.case = TRUE)),
length(grep("hillary", tweets.df$text, ignore.case = TRUE)) )
c( length(grep("trump", tweets_df$text, ignore.case = TRUE)),
length(grep("hillary", tweets_df$text, ignore.case = TRUE)) )
library(data.table); library(dplyr); library(tidyr); library(ggplot2)
optimal_users <- read.table('~/Downloads/optimal_users.csv',header=T,sep=',')
names(optimal_users) <- c('group','user_id','updates')
ggplot(optimal_users, aes(x=updates,fill=group)) +
geom_density(color=group) +
theme_minimal()
ggplot(optimal_users, aes(x=updates,fill=group)) +
geom_density() +
theme_minimal()
ggplot(optimal_users, aes(x=updates,fill=group)) +
geom_density() +
scale_x_continuous(limits=c(0,50)) +
theme_minimal()
ggplot(optimal_users, aes(x=updates,fill=group)) +
geom_density() +
scale_x_continuous(limits=c(0,20)) +
theme_minimal()
ggplot(optimal_users, aes(x=updates,fill=group)) +
geom_density(alpha=0.2) +
scale_x_continuous(limits=c(0,20)) +
theme_minimal()
ggplot(optimal_users, aes(x=updates,fill=group)) +
geom_density(alpha=0.4) +
scale_x_continuous(limits=c(0,10)) +
theme_minimal()
ggplot(optimal_users, aes(x=updates,fill=group)) +
geom_histogram() +
scale_x_continuous(limits=c(0,10)) +
theme_minimal()
ggplot(optimal_users, aes(x=updates,fill=group)) +
geom_histogram(position='dodge') +
scale_x_continuous(limits=c(0,10)) +
theme_minimal()
ggplot(optimal_users, aes(x=updates,color=group)) +
stat_ecdf() +
theme_minimal()
ggplot(optimal_users, aes(x=updates,color=group)) +
stat_ecdf() +
coord_cartesian(xlim=c(0,50)) +
theme_minimal()
ggplot(optimal_users, aes(x=updates,color=group)) +
stat_ecdf() +
coord_cartesian(xlim=c(0,10)) +
theme_minimal()
ggplot(optimal_users, aes(x=updates,color=group)) +
stat_ecdf(size=2) +
coord_cartesian(xlim=c(0,10)) +
theme_minimal()
ggplot(optimal_users, aes(x=updates,color=group)) +
stat_ecdf(size=2) +
coord_cartesian(xlim=c(0,100)) +
theme_minimal()
by_group <- optimal_users %>%
group_by(group) %>%
summarise(avg_updates = mean(updates),med_updates = median(updates))
by_group
by_group <- optimal_users %>%
group_by(group) %>%
summarise(avg_updates = mean(updates,na.rm=T),med_updates = median(updates,na.rm=T))
by_group
by_group <- optimal_users %>%
filter(user_id != "55d5a52a5c6939753513e869" & user_id != "55d4b1f31d21e0ce05ab7a95") %>%
group_by(group) %>%
summarise(avg_updates = mean(updates,na.rm=T),med_updates = median(updates,na.rm=T))
by_group
small_users <- read.table('~/Downloads/small.csv',sep=',',header=T)
names(small_users) <- c('user_id','last_plan','mrr_type','profiles','team_members')
ggplot(small_users,aes(x=profiles,color=mrr_type)) +
stat_ecdf(size=1) +
theme_minimal()
ggplot(small_users,aes(x=profiles,color=mrr_type)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=25) +
theme_minimal()
ggplot(small_users,aes(x=profiles,color=mrr_type)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,25)) +
theme_minimal()
ggplot(small_users,aes(x=profiles,color=mrr_type)) +
stat_ecdf(size=1) +
stat_smooth() +
coord_cartesian(xlim=c(0,25)) +
theme_minimal()
ggplot(small_users,aes(x=profiles,color=mrr_type)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,25)) +
theme_minimal()
ggplot(small_users,aes(x=profiles,color=mrr_type)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,25)) +
labs(x="Profiles",y='',title='Percentage of Users with X or Less Profiles',color="MRR Type") +
theme_minimal()
ggplot(small_users,aes(x=profiles,color=mrr_type)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,25)) +
labs(x="Profiles",y='',title='Percentage of Users with X or Less Profiles',color="MRR Type") +
theme_minimal()
ggplot(small_users,aes(x=team_members,color=mrr_type)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,25)) +
labs(x="Profiles",y='',title='Percentage of Users with X or Less Team Members,color="MRR Type") +
theme_minimal()
ggplot(small_users,aes(x=team_members,color=mrr_type)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,25)) +
labs(x="Profiles",y='',title='Percentage of Users with X or Less Team Members',color="MRR Type") +
theme_minimal()
ggplot(small_users,aes(x=team_members,color=mrr_type)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,25)) +
labs(x="Profiles",y='',title='Percentage of Users with X or Less Team Members',color="MRR Type") +
theme_minimal()
ggplot(small_users,aes(x=team_members,color=mrr_type)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,10)) +
labs(x="Profiles",y='',title='Percentage of Users with X or Less Team Members',color="MRR Type") +
theme_minimal()
churned_users <- read.table('~/Downloads/small.csv',sep=',',header=T)
names(churned_users) <- c('user_id','last_plan','type','profiles','team_members')
active_users <- read.table('~/Downloads/active_small.csv',sep=',',header=T)
names(active_users) <- c('user_id','profiles','team_members')
active_users$last_plan <- as.factor('small')
active_users$type <- as.factor('active')
small_users <- rbind(active_users,churned_users)
ggplot(small_users,aes(x=profiles,color=mrr_type)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,25)) +
labs(x="Profiles",y='',title='Percentage of Users with X or Less Profiles',color="MRR Type") +
theme_minimal()
ggplot(small_users,aes(x=profiles,color=type)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,25)) +
labs(x="Profiles",y='',title='Percentage of Users with X or Less Profiles',color="Type") +
theme_minimal()
ggplot(small_users,aes(x=team_members,color=type)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,10)) +
labs(x="Profiles",y='',title='Percentage of Users with X or Less Team Members',color="Type") +
theme_minimal()
ggplot(small_users,aes(x=team_members,color=type)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,10)) +
labs(x="Team Members",y='',title='Percentage of Users with X or Less Team Members',color="Type") +
theme_minimal()
suggestions <- read.table('~/Downloads/suggestions.csv',sep=',',header=T)
names(suggestions) <- c('user_id','plan_status','suggestions')
ggplot(suggestions,aes(x=suggestions,color=plan_status)) +
stat_ecdf(size=1) +
theme_minimal()
ggplot(suggestions,aes(x=suggestions,color=plan_status)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,200))+
theme_minimal()
ggplot(filter(suggestions,plan_status != "admin_downgraded"),aes(x=suggestions,color=plan_status)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,200))+
theme_minimal()
ggplot(filter(suggestions,plan_status != "admin_downgraded"),aes(x=suggestions,color=plan_status)) +
stat_ecdf(size=1) +
coord_cartesian(xlim=c(0,200))+
scale_colour_discrete(labels=c("active", "downgraded")) +
labs(x="Number of Suggestions Shared in Past 60 Days",y='',title='Percentage of Users with X or Less Suggestions in Past 60 Days',color='Status')+
theme_minimal()
library(data.table); library(dplyr); library(tidyr); library(ggplot2)
users <- read.table('~/Downloads/user_signups.csv',sep=',',header = T)
names(users) <- c('user_id','total','twitter','facebook','linkedin','pinterest','google','signup_source')
levels(users$signup_source)
ggplot(filter(users,signup_source=='twitter'),aes(x=total)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(0,5)) +
theme_minimal()
ggplot(filter(users,signup_source=='twitter'),aes(x=total,fill='#00aced')) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(0,5)) +
labs(x='profiles',y='',title='Number of Users with X Profiles who Signed Up with Twitter') +
theme_minimal()
ggplot(filter(users,signup_source=='twitter'),aes(x=total)) +
geom_histogram(binwidth=1,color='white',fill='#00aced') +
scale_x_continuous(limits=c(0,5)) +
labs(x='profiles',y='',title='Number of Users with X Profiles who Signed Up with Twitter') +
theme_minimal()
require(gridExtra)
grid.arrange(p1,p2,p3,p4,p5 ncol=1)
grid.arrange(p1,p2,p3,p4,p5, ncol=1)
p1 <- ggplot(filter(users,signup_source=='twitter'),aes(x=total)) +
geom_histogram(binwidth=1,color='white',fill='#00aced') +
scale_x_continuous(limits=c(0,5)) +
labs(x='profiles',y='',title='Number of Users with X Profiles who Signed Up with Twitter') +
theme_minimal()
p2 <- ggplot(filter(users,signup_source=='facebook'),aes(x=total)) +
geom_histogram(binwidth=1,color='white',fill='#3b5998') +
scale_x_continuous(limits=c(0,5)) +
labs(x='profiles',y='',title='Number of Users with X Profiles who Signed Up with Facebook') +
theme_minimal()
p3 <- ggplot(filter(users,signup_source=='google'),aes(x=total)) +
geom_histogram(binwidth=1,color='white',fill='#dd4b39') +
scale_x_continuous(limits=c(0,5)) +
labs(x='profiles',y='',title='Number of Users with X Profiles who Signed Up with G+') +
theme_minimal()
p4 <- ggplot(filter(users,signup_source=='linkedin'),aes(x=total)) +
geom_histogram(binwidth=1,color='white',fill='#007bb6') +
scale_x_continuous(limits=c(0,5)) +
labs(x='profiles',y='',title='Number of Users with X Profiles who Signed Up with Linkedin') +
theme_minimal()
p5 <- ggplot(filter(users,signup_source=='email'),aes(x=total)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(0,5)) +
labs(x='profiles',y='',title='Number of Users with X Profiles who Signed Up with Email') +
theme_minimal()
grid.arrange(p1,p2,p3,p4,p5, ncol=1)
grid.arrange(p1,p2,p3,p4,p5, ncol=2)
p6 <- ggplot(filter(users,signup_source==''),aes(x=total)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(0,5)) +
labs(x='profiles',y='',title='Number of Users with X Profiles who Signed Up without Source') +
theme_minimal()
grid.arrange(p1,p2,p3,p4,p5,p6, ncol=2)
timezones <- read.table('~/Downloads/timezones.csv',sep=',',header=T)
names(timezones) <- c('user_id','profile_id','timezone')
by_user <- timezones %>%
group_by(user_id) %>%
summarise(timezones = n_distinct(timezone))
ggplot(by_user,aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(0,5)) +
theme_minimal()
ggplot(by_user,aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,4)) +
theme_minimal()
ggplot(by_user,aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,4)) +
labs(x='Number of Timezones',y='',title='Number of Users with X Timezones')
theme_minimal()
ggplot(by_user,aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,4)) +
labs(x='Number of Timezones',y='',title='Number of Users with X Timezones') +
theme_minimal()
by_user <- timezones %>%
group_by(user_id) %>%
summarise(profiles=n_distinct(profile_id),timezones = n_distinct(timezone))
by_user <- timezones %>%
group_by(user_id) %>%
summarise(profiles=n_distinct(profile_id),timezones = n_distinct(timezone))
ggplot(filter(by_user,profiles>1),aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,4)) +
labs(x='Number of Timezones',y='',title='Number of Users with X Timezones') +
theme_minimal()
ggplot(filter(by_user,profiles>2),aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,4)) +
labs(x='Number of Timezones',y='',title='Number of Users with X Timezones') +
theme_minimal()
ggplot(filter(by_user,profiles>3),aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,4)) +
labs(x='Number of Timezones',y='',title='Number of Users with X Timezones') +
theme_minimal()
## Histogram of Number of Timezones
ggplot(filter(by_user,profiles>3),aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,5)) +
labs(x='Number of Timezones',y='',title='Number of Users with X Timezones') +
theme_minimal()
ggplot(filter(by_user,profiles==1),aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,5)) +
labs(x='Number of Timezones',y='',title='Number of Users with X Timezones') +
theme_minimal()
p1 <- ggplot(filter(by_user,profiles==1),aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,5)) +
labs(x='Number of Timezones',y='',title='Number of Users with 1 Profile and X Timezones') +
theme_minimal()
p2 <- ggplot(filter(by_user,profiles==2),aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,5)) +
labs(x='Number of Timezones',y='',title='Number of Users with 2 Profile and X Timezones') +
theme_minimal()
p3 <- ggplot(filter(by_user,profiles==3),aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,5)) +
labs(x='Number of Timezones',y='',title='Number of Users with 1 Profile and X Timezones') +
theme_minimal()
p4 <- ggplot(filter(by_user,profiles==4),aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,5)) +
labs(x='Number of Timezones',y='',title='Number of Users with 1 Profile and X Timezones') +
theme_minimal()
grid.arrange(p1,p2,p3,p4, ncol=2)
p2 <- ggplot(filter(by_user,profiles==2),aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,5)) +
labs(x='Number of Timezones',y='',title='Number of Users with 2 Profile and X Timezones') +
theme_minimal()
p3 <- ggplot(filter(by_user,profiles==3),aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,5)) +
labs(x='Number of Timezones',y='',title='Number of Users with 3 Profile and X Timezones') +
theme_minimal()
p4 <- ggplot(filter(by_user,profiles==4),aes(x=timezones)) +
geom_histogram(binwidth=1,color='white') +
scale_x_continuous(limits=c(1,5)) +
labs(x='Number of Timezones',y='',title='Number of Users with 4 Profile and X Timezones') +
theme_minimal()
grid.arrange(p1,p2,p3,p4, ncol=2)
shiny::runApp('Documents/diversity-dash/shiny-server')
team_url <- 'https://docs.google.com/spreadsheets/u/1/d/1E9WwcIEYuGxR8GUrmxL1iaozOk_0FKSPPWbnCDn_C0A/pubhtml'
getwd()
setwd('/Users/julianwinternheimer/Documents/diversity-dash/shiny-server')
readGoogleSheet <- function(url, name, na.string="", header=TRUE){
day <-format(Sys.time(), "%Y-%m-%d")
filename <- paste0('./data/',name,day,'.csv')
if (!file.exists(filename))
download(url, destfile=filename)
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
doc <- paste(readLines(filename), collapse=" ")
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=header, stringsAsFactors=FALSE, as.data.frame=TRUE)
raw <- lapply(ret, function(x){ x[ x == na.string] <- NA; x})
cleanGoogleTable(raw, table=1)
}
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
team_url <- 'https://docs.google.com/spreadsheets/u/1/d/1E9WwcIEYuGxR8GUrmxL1iaozOk_0FKSPPWbnCDn_C0A/pubhtml'
applicants_url <- "https://docs.google.com/spreadsheets/d/11GXSEkgDnLIBWmqYWJA1VbG9xmsPPl2MFRWxvFiWmwQ/pubhtml"
u <- list(team=team_url, applicants=applicants_url)
d <- readGoogleSheet(u[key], 'team')
cleanUpNames <- function(data) {
if (length(names(data)) == 8) {
names(data) <- c("datetime","gender","ethnicity","region","age_range","department", "comment","opt_in")
} else if(length(names(data)) == 7) {
names(data) <- c("datetime","gender","ethnicity","region","age_range","department", "comment")
} else {
names(data) <- c("datetime","gender","ethnicity","region","age_range","department")
}
data
}
d <- cleanUpNames(d)
d <- readGoogleSheet(u[key], 'team')
shiny::runApp()
readData <- function (key='team') {
team_url <- 'https://docs.google.com/spreadsheets/u/1/d/1E9WwcIEYuGxR8GUrmxL1iaozOk_0FKSPPWbnCDn_C0A/pubhtml'
applicants_url <- "https://docs.google.com/spreadsheets/d/11GXSEkgDnLIBWmqYWJA1VbG9xmsPPl2MFRWxvFiWmwQ/pubhtml"
u <- list(team=team_url, applicants=applicants_url)
d <- readGoogleSheet(u[key], key)
d[, colSums(is.na(d)) != nrow(d)]
cleanUpNames(d)
}
getFilteredData <- function(key, input) {
data[[key]] %>%
filter(gender %in% input$genderFilter) %>%
filter(ethnicity %in% input$ethnicityFilter) %>%
filter(age_range %in% input$ageFilter) %>%
filter(department %in% input$areaFilter)
}
getDataForInput <- function (input) {
switch(input$dataset,
"The Buffer Team" = data$team %>%
filter(gender %in% input$genderFilter) %>%
filter(ethnicity %in% input$ethnicityFilter) %>%
filter(age_range %in% input$ageFilter) %>%
filter(department %in% input$areaFilter),
"Applicants" = data$applicants %>%
filter(gender %in% input$genderFilter) %>%
filter(ethnicity %in% input$ethnicityFilter) %>%
filter(age_range %in% input$ageFilter) %>%
filter(department %in% input$areaFilter)
)
}
team_raw <- readGoogleSheet(team_url, 'team')
team_raw <- cleanUpNames(team_raw)
team <- mergeData(team_raw)
shiny::runApp()
team_raw <- readGoogleSheet(team_url, 'team')
team_raw <- team_raw[,colSums(is.na(team_raw))<nrow(team_raw)]
team_raw <- cleanUpNames(team_raw)
shiny::runApp()
shiny::runApp()
